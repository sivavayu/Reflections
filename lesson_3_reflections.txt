When would you want to use a remote repository rather than keeping all your work
local?

    When the projects are large and there are multiple collaborators. I would want to keep only the files I need.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    I may not want all the files in the remote repository for my contribution to the project. I can manually pull the branch I need and stay up to date with that portion of remote repository. Also, remote repository is stagnant if no user pushes anything into it. If I am making changes to my local repository and Git auomatically tries to stay upto date with the remote repository, then it will be a chaos. 

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks are used to "copy" the repositories from other user's profile to your profile when you don't have permission to change the files of the owner. 
	
	Clones are used to "copy" a remote repository on to the local drive. Remote repository may be on github on the internet or on a local computer of a friend or colleauge. 
	
	Branches are different contexts within the same repository. They have several uses like new feature, experimental feature, etc.
	
	I would use forks when I find a very useful project on GitHub and customize it fit my own purpose. I will use clones if I do not need a remote repository of my own until I am ready. And branches could be used for new features as mentioned in one of the interviews. 

What is the benefit of having a copy of the last known state of the remote
stored locally?

    A copy of last known remote, if stored locally, will help Git in understanding the difference between the state the local system knows and the current state on the GitHub when you fetch the repository.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I would use Google Drive to collaborate with other people on projects. Both people cannot work on a same file unless it is google docs. That will result in multiple versions of the file or multiple files for different sections and merging of the sections manually by communicating. Lot of this stuff is not easy with just comments or chat, a team need to be physically be accessible to understand the project at any point of time. 

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    While collaborating, different people will have different ideas for features. These ideas must be approved by everyone or someone on the team to be put on the master. So, it is easier to have a branch that can be removed or added than a segment of master that will not be needed in the future at all. This keeps master smaller than if there were no branches. 
	
Other userful commands: 
	To change the editor for commit messages from vim to notepad++, I used this command from stack overflow: http://stackoverflow.com/questions/1634161/how-do-i-use-notepad-or-other-with-msysgit
	Command:
			git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
	
	

